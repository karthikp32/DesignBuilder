
import pytest
import pytest_asyncio
import os
from designbuilder.coding_agents.python_agent import PythonAgent
from designbuilder.llm_backends.gemini import GeminiBackend

@pytest_asyncio.fixture
async def python_agent():
    component = {
        "name": "HTTP Server",
        "description": """### 1. HTTP Server
- **Type:** Service
- **Responsibilities:**
  - Accept incoming HTTP requests.
  - Route requests to appropriate handlers.
  - Return HTTP responses.
- **Dependencies:** 
  - Request Handler
  - Router
  - Logger
- **Interfaces:**
  - `start_server(port: int)` → starts listening for HTTP requests.
  - `stop_server()` → gracefully stops the server. Write in Python"""
    }
    agent = PythonAgent(component)
    agent.llm_backend = GeminiBackend()
    
    # Pre-generate the plan
    await agent.plan()

    # Pre-generate implementation
    await agent.implement()
    
    return agent

@pytest.mark.asyncio
async def test_setup_scripts(python_agent):
    await python_agent.setup_scripts()
    assert os.path.exists(python_agent.test_file_path)
    assert os.path.exists(python_agent.output_file_path)

@pytest.mark.asyncio
async def test_plan(python_agent):
    # _plan is already generated by the fixture
    expected_words = ["purpose", "expected behavior", "key sub-tasks", "dependencies", "edge cases"]
    assert all(word.lower() in python_agent._plan.lower() for word in expected_words)

@pytest.mark.asyncio
async def test_implement(python_agent):
    expected_words = ["class", python_agent.component["name"].split()[0]]
    assert os.path.exists(python_agent.output_file_path)
    with open(python_agent.output_file_path, "r") as f:
        impl_code = f.read()
    assert all(word.lower() in impl_code.lower() for word in expected_words)


@pytest.mark.asyncio
async def test_write_tests(python_agent):
    await python_agent.write_tests()
    expected_words = ["def test_", "assert", "setup", "teardown", "edge case"]
    assert all(word.lower() in python_agent.test_code.lower() for word in expected_words)
    assert python_agent._plan.split()[0] in python_agent.test_code


async def _create_dummy_test(python_agent, impl_code, test_code, test_filename="test_add.py"):
    # Write implementation
    with open(python_agent.output_file_path, "w") as f:
        f.write(impl_code)

    # Write test file
    test_file_path = os.path.join(python_agent.tests_dir, test_filename)
    with open(test_file_path, "w") as f:
        f.write(test_code)

    python_agent.test_file_path = test_file_path
    return test_file_path

@pytest.mark.asyncio
async def test_test_passing(python_agent):
    """Verify python_agent.test() returns PASSED when tests succeed."""
    test_file_path = await _create_dummy_test(
        python_agent,
        impl_code="def add(a, b):\n    return a + b",
        test_code="from http_server import add\n\ndef test_add():\n    assert add(1, 2) == 3"
    )

    test_result, test_summary = await python_agent.test()
    assert test_result == "PASSED"
    assert test_summary.strip() == ""

    # Clean up
    os.remove(python_agent.output_file_path)
    os.remove(test_file_path)


@pytest.mark.asyncio
async def test_test_failing(python_agent):
    """Verify python_agent.test() returns FAILED when tests fail."""
    test_file_path = await _create_dummy_test(
        python_agent,
        impl_code="def add(a, b):\n    return a + b",
        test_code="from http_server import add\n\ndef test_add():\n    assert add(1, 2) == 4"
    )

    test_result, test_summary = await python_agent.test()
    assert test_result == "FAILED"
    assert "assert add(1, 2) == 4" in test_summary

    # Clean up
    os.remove(python_agent.output_file_path)
    os.remove(test_file_path)

@pytest.mark.asyncio
async def test_debug(python_agent):
    # Create a failing test
    with open(python_agent.output_file_path, "w") as f:
        f.write("def main():\n    pass")
    with open(python_agent.test_file_path, "w") as f:
        f.write("def test_main():\n    assert False")

    # Get the test summary
    _, test_summary = await python_agent.test()

    # Store the original implementation
    original_implementation = python_agent._implementation

    # Debug the code
    await python_agent.debug(test_summary)

    # Check that the implementation has been modified
    assert original_implementation != python_agent._implementation
